@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

@if (allState.ShowUser)
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-5">
        <MudPaper Class="pa-4">
            <MudStack Spacing="2">
                <MudText Typo="Typo.h5">Manage Users</MudText>

                <MudTable Items="ManageUsers" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>                    
                        <MudTh>Id</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Role</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>                     
                        <MudTd>@context.UserId</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>@context.Email</MudTd>
                        <MudTd>@context.Role</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="@(()=>OpenEditDialog(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(()=>DeleteClicked(context))" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudAlert Severity="Severity.Info" Variant="Variant.Filled">
                            No User added yet!
                        </MudAlert>
                    </NoRecordsContent>
                </MudTable>
            </MudStack>
        </MudPaper>
    </MudContainer>
}

@code {
    public List<ManageUser> ManageUsers { get; set; } = new();
    public List<SystemRole> SystemRoles { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetUsers();
        await GetRoles();
        allState.Action += StateHasChanged;
    }

    private async Task GetUsers() => ManageUsers = await accountService.GetUsers();
    private async Task GetRoles() => SystemRoles = await accountService.GetRoles();

    private async Task OpenEditDialog(ManageUser user)
    {
        var parameters = new DialogParameters
        {
            { "ManageUser", new ManageUser
                {
                    UserId = user.UserId,
                    Name = user.Name,
                    Email = user.Email,
                    Role = user.Role
                }
            },
            { "SystemRoles", SystemRoles }
        };

        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<UserDialog>("Edit User", parameters, options);

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            Snackbar.Add("User updated successfully!", Severity.Success);
            await GetUsers();
        }
    }

    private async Task DeleteClicked(ManageUser user)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {user.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true
        };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await accountService.DeleteUser(user.UserId);
            if (response.Flag)
            {
                Snackbar.Add(response.Message, Severity.Success);
                await GetUsers();
            }
            else
            {
                Snackbar.Add(response.Message, Severity.Error);
            }
        }     
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}
