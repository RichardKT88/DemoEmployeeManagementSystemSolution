<MudDialog>
    <DialogContent>
        <MudForm @ref="form" Model="ManageUser" Validated="OnValidated">
            <MudText Typo="Typo.h6" Class="mb-4">Update User</MudText>

            <MudTextField @bind-Value="ManageUser.Name" Label="Name" Disabled="true" For="@(() => ManageUser.Name)" />

            <MudTextField @bind-Value="ManageUser.Email" Label="Email" Disabled="true" For="@(() => ManageUser.Email)" />

            <MudSelect @bind-Value="ManageUser.Role" Label="Select Role" Required="true" For="@(() => ManageUser.Role)">
                @foreach (var role in SystemRoles)
                {
                    <MudSelectItem Value="@role.Name">@role.Name</MudSelectItem>
                }
            </MudSelect>
        </MudForm>
    </DialogContent>

    <DialogActions>
        <MudButton OnClick="Save" Color="Color.Primary" Variant="Variant.Filled">Save</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Default" Variant="Variant.Text">Cancel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public ManageUser ManageUser { get; set; } = new();
    [Parameter] public List<SystemRole> SystemRoles { get; set; } = new();
    [Inject] private ISnackbar Snackbar { get; set; }
    
    private MudForm form;

    private async Task Save()
    {
        await form.Validate();

        if (!form.IsValid)
        {
            Snackbar.Add("Please correct validation errors before saving.", Severity.Warning);
            return;
        }

        var result = await accountService.UpdateUser(ManageUser);
        if (result.Flag)
        {
            MudDialog.Close(DialogResult.Ok(ManageUser));
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnValidated()
    {
        // (Opcional) Código que executa depois da validação
    }
}
