@implements IDisposable
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Text.Json
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-12">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                            <MudButton Variant="Variant.Outlined"
                                       Color="MudBlazor.Color.Success"
                                       StartIcon="@Icons.Material.Filled.PersonAdd"
                                       OnClick="ShowAddOrUpdateEmployeeButtonClicked">
                                Add Employee
                            </MudButton>
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToExcel">
                                    Export Excel
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="ExportToPdf">
                                    Export PDF
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Tertiary" StartIcon="@Icons.Material.Filled.Print" OnClick="PrintGrid">
                                    Print
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        <MudDataGrid Items="@Employees"
                                     T="Employee"
                                     MultiSelection="true"
                                     Bordered="true"
                                     Striped="true"
                                     Hover="true"
                                     Dense="true"
                                     SortMode="SortMode.Multiple"
                                     Filterable="true"
                                     QuickFilter="@_quickFilter">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Employees</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <Columns>
                                <TemplateColumn T="Employee" Title="Employee Image">
                                    <CellTemplate>
                                        <MudImage Src="@context.Item.Photo" width="150" height="150" Alt="@context.Item.Name" />
                                    </CellTemplate>
                                </TemplateColumn>
                                <PropertyColumn Property="e => e.CivilId" Title="Civil ID" />
                                <PropertyColumn Property="e => e.FileNumber" Title="File Number" />
                                <PropertyColumn Property="e => e.Name" Title="Name" />
                                <PropertyColumn Property="e => e.TelephoneNumber" Title="Telephone" />
                                <PropertyColumn Property="e => e.JobName" Title="Job Name" />
                                <PropertyColumn Property="e => e.Branch.Name" Title="Branch" />
                                <PropertyColumn Property="e => e.Town.Name" Title="Town" />
                                <TemplateColumn T="Employee" Title="Menu">
                                    <CellTemplate>
                                        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                                       Color="Color.Primary" OnClick="@(() => OpenContextMenu(context.Item))" />
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
}
<AddOrUpdateEmployeePage @ref="addOrUpdateEmployeePage"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultCountries"
                         Cities="DefaultCities"
                         Towns="DefaultTowns"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="DefaultDepartments"
                         Branches="DefaultBranches"
                         HandleSaveEmployeeCLickedEvent="HandleSaveEmployeeCLickedEvent">
</AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
                    ShowDetailsPage="ShowDetailsPage"
                    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />

<ContextMenu HandleViewClicked="ViewClicked"
             HandleDeleteClicked="DeleteClicked"
             HandleEditClicked="EditClicked"
             HandleAddHealthClicked="AddHealthClicked"
             HandleAddOvertimeClicked="AddOvertimeClicked"
             HandleAddSanctionClicked="AddSanctionClicked"
             HandleAddVacationClicked="AddVacationClicked" />

@code {
    AddOrUpdateEmployeePage? addOrUpdateEmployeePage;
    public IEnumerable<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    //Country /City / Town
    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    //General Department / Department / Branch
    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetOvertimeTypes();
        await GetSanctionTypes();
        await GetVacationTypes();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);

    }

    //Notify parent when Add or Update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }
    //load employees
    private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    //Save Employee
    async Task HandleSaveEmployeeCLickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            addOrUpdateEmployeePage!.ClearContent();
            await addOrUpdateEmployeePage!.Closeform();
        }
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;
    public Employee SelectedEmployee { get; set; } = new();
    public bool ShowDetailsPage { get; set; } = false;

    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }
    //Context menu
    private async Task OpenContextMenu(Employee employee)
    {
        SelectedEmployee = employee;
        var parameters = new DialogParameters
            {

                ["HandleViewClicked"] = EventCallback.Factory.Create(this, ViewClicked),
                ["HandleEditClicked"] = EventCallback.Factory.Create(this, EditClicked),
                ["HandleDeleteClicked"] = EventCallback.Factory.Create(this, DeleteClicked),
                ["HandleAddVacationClicked"] = EventCallback.Factory.Create(this, AddVacationClicked),
                ["HandleAddOvertimeClicked"] = EventCallback.Factory.Create(this, AddOvertimeClicked),
                ["HandleAddHealthClicked"] = EventCallback.Factory.Create(this, AddHealthClicked),
                ["HandleAddSanctionClicked"] = EventCallback.Factory.Create(this, AddSanctionClicked)

            };

        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall, FullWidth = true };

        await DialogService.ShowAsync<ContextMenu>("Employee Menu", parameters, options);
    }

    //View clicked
    private async Task ViewClicked()
    {
        Employee = SelectedEmployee;
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }
    //Edit clicked
    private async Task EditClicked()
    {
        //EmployeeGrouping1
        addOrUpdateEmployeePage!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployeePage!.EmployeeGroup1.Name = SelectedEmployee.Name!;
        addOrUpdateEmployeePage!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber!;
        addOrUpdateEmployeePage!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber!;
        addOrUpdateEmployeePage!.EmployeeGroup1.Address = SelectedEmployee.Address!;
        addOrUpdateEmployeePage!.EmployeeGroup1.Photo = SelectedEmployee.Photo!;
        addOrUpdateEmployeePage!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        //EmployeeGrouping2
        addOrUpdateEmployeePage!.EmployeeGroup2.JobName = SelectedEmployee.JobName!;
        addOrUpdateEmployeePage!.EmployeeGroup2.Other = SelectedEmployee.Other;

        //General Department / Department / Branch
        addOrUpdateEmployeePage!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Id!;
        addOrUpdateEmployeePage!.Department = SelectedEmployee.Branch!.Department!.Id!;
        addOrUpdateEmployeePage!.Branch = SelectedEmployee.Branch!.Id!;

        //Country / City / Town
        addOrUpdateEmployeePage!.Country = SelectedEmployee.Town!.City!.Country!.Id!;
        addOrUpdateEmployeePage!.City = SelectedEmployee.Town!.City!.Id!;
        addOrUpdateEmployeePage!.Town = SelectedEmployee.Town!.Id!;

        SelectedEmployee = new();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;
    }
    //Delete clicked
    private async Task DeleteClicked()
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {SelectedEmployee.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await employeeService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
            var isValidResponse = await DisplayMessage(response.Flag, response.Message);
            if (isValidResponse)
            {
                SelectedEmployee = new();
                await LoadEmployees();
            }
        }
    }
    //Add Vacation clicked
    private async Task GetVacationTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);
    Vacation Vacation = new();
    List<VacationType> VacationTypes = [];
    private async Task AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        var parameters = new DialogParameters
        {
            { "Vacation", Vacation },
            { "VacationTypes", VacationTypes },
        };

        var dialog = await DialogService.ShowAsync<VacationDialog>("Add Employe's Vacation", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            SelectedEmployee = new();
            Vacation = new();
        }

    }

    //Add Overtime clicked
    private async Task GetOvertimeTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);
    Overtime Overtime = new();
    List<OvertimeType> OvertimeTypes = [];
    private async Task AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        var parameters = new DialogParameters
        {
            { "Overtime", Overtime },
            { "OvertimeTypes", OvertimeTypes },
        };

        var dialog = await DialogService.ShowAsync<OvertimeDialog>("Add Employe's Overtime", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            SelectedEmployee = new();
            Overtime = new();
        }

    }

    //Add Health clicked
    Doctor Doctor = new();
    private async Task AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        var parameters = new DialogParameters
        {
            { "Doctor", Doctor },
        };

        var dialog = await DialogService.ShowAsync<DoctorDialog>("Add Employee Health Issue", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            SelectedEmployee = new();
            Doctor = new();
        }

    }

    //Add Sanction clicked
    private async Task GetSanctionTypes() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);
    Sanction Sanction = new();
    List<SanctionType> SanctionTypes = [];
    private async Task AddSanctionClicked()
    {
        Sanction.EmployeeId = SelectedEmployee.Id;
        var parameters = new DialogParameters
        {
            { "Sanction", Sanction },
            { "SanctionTypes", SanctionTypes },
        };

        var dialog = await DialogService.ShowAsync<SanctionDialog>("Add Employe'a Sanction", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            SelectedEmployee = new();
            Sanction = new();
        }

    }

    //Details employee close btn clicked
    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }

    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            Snackbar.Add(message, Severity.Success);
            return true;
        }
        else
        {
            Snackbar.Add(message, Severity.Error);
            return false;
        }
    }
    public void Dispose() => allState.Action -= StateHasChanged;

    string _searchString = null;

    private Func<Employee, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.JobName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Branch.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Town.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.CivilId} {x.FileNumber} {x.TelephoneNumber}".Contains(_searchString))
            return true;
        return false;
    };
    //Excel export / PDF Export
    private async Task ExportToPdf()
    {
        var json = JsonSerializer.Serialize(Employees, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        await JS.InvokeVoidAsync("pdfUtils.generateEmployeePdf", json);
    }

    private async Task ExportToExcel()
    {
        var json = JsonSerializer.Serialize(Employees);
        await JS.InvokeVoidAsync("excelUtils.exportEmployeeToExcel", json);
    }

    private async Task PrintGrid()
    {
        await JS.InvokeVoidAsync("printGrid");
    }
}
