@implements IDisposable
@inject IJSRuntime JS
@using System.Text.Json
@inject ISnackbar Snackbar
@if (allState.ShowEmployee)
{
    if (ShowMainPage)
    {
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-12">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="4" Class="p-4">
                        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                            <MudButton Variant="Variant.Outlined"
                                       Color="MudBlazor.Color.Success"
                                       StartIcon="@Icons.Material.Filled.PersonAdd"
                                       OnClick="ShowAddOrUpdateEmployeeButtonClicked">
                                Add Employee
                            </MudButton>
                            <MudStack Row Spacing="2">
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToExcel">
                                    Export Excel
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="ExportToPdf">
                                    Export PDF
                                </MudButton>
                                <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Tertiary" StartIcon="@Icons.Material.Filled.Print" OnClick="PrintGrid">
                                    Print
                                </MudButton>
                            </MudStack>
                        </MudStack>
                        <MudDataGrid Items="@Employees"
                                     T="Employee"
                                     MultiSelection="true"
                                     Bordered="true"
                                     Striped="true"
                                     Hover="true"
                                     Dense="true"
                                     SortMode="SortMode.Multiple"
                                     Filterable="true"
                                     QuickFilter="@_quickFilter">
                            <ToolBarContent>
                                <MudText Typo="Typo.h6">Employees</MudText>
                                <MudSpacer />
                                <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                            </ToolBarContent>
                            <Columns>
                                <TemplateColumn T="Employee" Title="Employee Image">
                                    <CellTemplate>
                                        <MudImage Src="@context.Item.Photo" width="150" height="150" Alt="@context.Item.Name" />
                                    </CellTemplate>
                                </TemplateColumn>
                                <PropertyColumn Property="e => e.CivilId" Title="Civil ID" />
                                <PropertyColumn Property="e => e.FileNumber" Title="File Number" />
                                <PropertyColumn Property="e => e.Name" Title="Name" />
                                <PropertyColumn Property="e => e.TelephoneNumber" Title="Telephone" />
                                <PropertyColumn Property="e => e.JobName" Title="Job Name" />
                                <PropertyColumn Property="e => e.Branch.Name" Title="Branch" />
                                <PropertyColumn Property="e => e.Town.Name" Title="Town" />
                                <TemplateColumn T="Employee" Title="Menu">
                                    <CellTemplate>
                                        <MudIconButton Icon="@Icons.Material.Filled.Menu"
                                                       Color="Color.Primary"/>
                                    </CellTemplate>                                    
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
}
<AddOrUpdateEmployeePage @ref="addOrUpdateEmployeePage"
                         Employee="Employee"
                         ShowAddOrUpdateEmployee="ShowAddOrUpdatePage"
                         NotifyParentFormCloseClicked="NotifyParentFormCloseClicked"
                         Countries="DefaultCountries"
                         Cities="DefaultCities"
                         Towns="DefaultTowns"
                         GeneralDepartments="DefaultGeneralDepartments"
                         Departments="DefaultDepartments"
                         Branches="DefaultBranches"
                         HandleCountrySelectedEvent="HandleCountrySelectedEvent"
                         HandleCitySelectedEvent="HandleCitySelectedEvent"
                         HandleGeneralDepartmentSelectedEvent="HandleGeneralDepartmentSelectedEvent"
                         HandleDepartmentSelectedEvent="HandleDepartmentSelectedEvent"
                         HandleSaveEmployeeCLickedEvent="HandleSaveEmployeeCLickedEvent">
</AddOrUpdateEmployeePage>

<EmployeeDetailPage EmployeeDetails="Employee"
                    ShowDetailsPage="ShowDetailsPage"
                    HandleDetailsPageCloseBtnClicked="HandleDetailsPageCloseBtnClicked" />
<ContextMenu @ref="contextMenu"
             HandleDeleteClicked="DeleteClicked"
             HandleEditClicked="EditClicked"
             HandleViewClicked="ViewClicked"
             HandleAddHealthClicked="AddHealthClicked"
             HandleAddOvertimeClicked="AddOvertimeClicked"
             HandleAddSanctionClicked="AddSanctionClicked"
             HandleAddVacationClicked="AddVacationClicked" />

<DoctorDialog @ref="doctorDialog" Doctor="Doctor" HandleSaveOperationEvent="SaveHealthEvent" />

<OvertimeDialog @ref="overtimeDialog" ItemModel="Overtime" OvertimeTypes="OvertimeTypes" HandleSaveOperationEvent="SaveOvertimeEvent" />

<SanctionDialog @ref="sanctionDialog" ItemModel="Sanction" SanctionTypes="SanctionTypes" HandleSaveOperationEvent="SaveSanctionEvent" />

<VacationDialog @ref="vacationDialog" ItemModel="Vacation" VacationTypes="VacationTypes" HandleSaveOperationEvent="SaveVacationEvent" />

@code {
    private SfGrid<Employee>? DefaultGrid;
    AddOrUpdateEmployeePage? addOrUpdateEmployeePage;
    public IEnumerable<Employee> Employees { get; set; } = [];
    public Employee Employee { get; set; } = new();

    //Country /City / Town
    public List<Country> DefaultCountries { get; set; } = [];
    public List<City> DefaultCities { get; set; } = [];
    public List<Town> DefaultTowns { get; set; } = [];

    //General Department / Department / Branch
    public List<GeneralDepartment> DefaultGeneralDepartments { get; set; } = [];
    public List<Department> DefaultDepartments { get; set; } = [];
    public List<Branch> DefaultBranches { get; set; } = [];

    public List<Department> SelectedDepartments { get; set; } = [];
    public List<Branch> SelectedBranches { get; set; } = [];
    public List<City> SelectedCities { get; set; } = [];
    public List<Town> SelectedTowns { get; set; } = [];


    protected async override Task OnInitializedAsync()
    {
        allState.Action += StateHasChanged;
        await LoadEmployees();
        await LoadDefaults();
        await GetOvertimeTypes();
        await GetSanctionTypes();
        await GetVacationTypes();
    }

    private async Task LoadDefaults()
    {
        DefaultCountries = await countryService.GetAll(Constants.CountryBaseUrl);
        DefaultCities = await cityService.GetAll(Constants.CityBaseUrl);
        DefaultTowns = await townService.GetAll(Constants.TownBaseUrl);

        DefaultGeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
        DefaultDepartments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        DefaultBranches = await branchService.GetAll(Constants.BranchBaseUrl);

    }

    //country select
    private void HandleCountrySelectedEvent(int countryId) =>
        SelectedCities = DefaultCities.Where(c => c.CountryId == countryId).ToList();

    //city select
    private void HandleCitySelectedEvent(int cityId) =>
        SelectedTowns = DefaultTowns.Where(t => t.CityId == cityId).ToList();

    //General Department select
    private void HandleGeneralDepartmentSelectedEvent(int generalDepartmentId) =>
        SelectedDepartments = DefaultDepartments.Where(gd => gd.GeneralDepartmentId == generalDepartmentId).ToList();

    //Department select
    private void HandleDepartmentSelectedEvent(int departmentId) =>
        SelectedBranches = DefaultBranches.Where(d => d.DepartmentId == departmentId).ToList();

    //Notify parent when Add or Update employee form closes
    private async Task NotifyParentFormCloseClicked()
    {
        ShowMainPage = true;
        ShowAddOrUpdatePage = false;
        await LoadEmployees();
        SelectedEmployee = new();
    }
    //load employees
    private async Task LoadEmployees() => Employees = await employeeService.GetAll(Constants.EmployeeBaseUrl);

    //Save Employee
    async Task HandleSaveEmployeeCLickedEvent(Employee employee)
    {
        bool successCheck = false;
        if (employee.Id > 0)
        {
            var result = await employeeService.Update(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await employeeService.Insert(employee, Constants.EmployeeBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            addOrUpdateEmployeePage!.ClearContent();
            await addOrUpdateEmployeePage!.Closeform();
        }
    }

    public bool ShowMainPage { get; set; } = true;
    public bool ShowAddOrUpdatePage { get; set; } = false;

    //Context menu
    //Show menu Pop up
    ContextMenu? contextMenu;
    public Employee SelectedEmployee { get; set; } = new();
    void ShowMenuPopUp(Employee employee)
    {
        SelectedEmployee = employee;
        contextMenu!.OpenContextMenu();
    }

    //Edit clicked
    void EditClicked()
    {
        //EmployeeGrouping1
        addOrUpdateEmployeePage!.Employee.Id = SelectedEmployee.Id;
        addOrUpdateEmployeePage!.EmployeeGroup1.Name = SelectedEmployee.Name!;
        addOrUpdateEmployeePage!.EmployeeGroup1.TelephoneNumber = SelectedEmployee.TelephoneNumber!;
        addOrUpdateEmployeePage!.EmployeeGroup1.FileNumber = SelectedEmployee.FileNumber!;
        addOrUpdateEmployeePage!.EmployeeGroup1.Address = SelectedEmployee.Address!;
        addOrUpdateEmployeePage!.EmployeeGroup1.Photo = SelectedEmployee.Photo!;
        addOrUpdateEmployeePage!.EmployeeGroup1.CivilId = SelectedEmployee.CivilId;

        //EmployeeGrouping2
        addOrUpdateEmployeePage!.EmployeeGroup2.JobName = SelectedEmployee.JobName!;
        addOrUpdateEmployeePage!.EmployeeGroup2.Other = SelectedEmployee.Other;

        //General Department / Department / Branch
        addOrUpdateEmployeePage!.GeneralDepartment = SelectedEmployee.Branch!.Department!.GeneralDepartment!.Name!;
        addOrUpdateEmployeePage!.Department = SelectedEmployee.Branch!.Department!.Name!;
        addOrUpdateEmployeePage!.Branch = SelectedEmployee.Branch!.Name!;

        //Country / City / Town
        addOrUpdateEmployeePage!.Country = SelectedEmployee.Town!.City!.Country!.Name!;
        addOrUpdateEmployeePage!.City = SelectedEmployee.Town!.City!.Name!;
        addOrUpdateEmployeePage!.Town = SelectedEmployee.Town!.Name!;

        //Title
        addOrUpdateEmployeePage.Title = "Update";
        SelectedEmployee = new();
        contextMenu!.CloseContextMenu();
        ShowAddOrUpdatePage = true;
        ShowMainPage = false;

    }

    //Delete clicked
    private async Task DeleteClicked()
    {
        contextMenu!.CloseContextMenu();
        bool confirm = await dialogService.ConfirmAsync($"Are you sure you wanna delete {SelectedEmployee.Name}", "Confirm Delete");
        if (!confirm) return;

        var response = await employeeService.DeleteById(SelectedEmployee.Id, Constants.EmployeeBaseUrl);
        var result = await DisplayMessage(response.Flag, response.Message);
        if (result)
        {
            SelectedEmployee = new();
            await LoadEmployees();
        }
    }

    //View clicked
    public bool ShowDetailsPage { get; set; } = false;
    private void ViewClicked()
    {
        Employee = SelectedEmployee;
        contextMenu!.CloseContextMenu();
        ShowDetailsPage = true;
        ShowMainPage = false;
        SelectedEmployee = new();
    }
    void ShowAddOrUpdateEmployeeButtonClicked()
    {
        ShowMainPage = false;
        ShowAddOrUpdatePage = true;
    }

    private async Task GetOvertimeTypes() => OvertimeTypes = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task GetSanctionTypes() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    private async Task GetVacationTypes() => VacationTypes = await vacationTypeService.GetAll(Constants.VacationTypeBaseUrl);

    //Add Health clicked
    DoctorDialog doctorDialog;
    Doctor Doctor = new();
    private void AddHealthClicked()
    {
        Doctor.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        doctorDialog.OpenDialog();

    }

    //Save Health Handler
    async Task SaveHealthEvent(Doctor item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await doctorService.Insert(item, Constants.DoctorBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Doctor = new();
            doctorDialog!.CloseDialog();

        }
    }

    //Add Overtime clicked
    OvertimeDialog? overtimeDialog;
    Overtime Overtime = new();
    List<OvertimeType> OvertimeTypes = [];
    private void AddOvertimeClicked()
    {
        Overtime.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        overtimeDialog!.OpenDialog();
    }

    //Save Overtime Handler
    async Task SaveOvertimeEvent(Overtime item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await overtimeService.Insert(item, Constants.OvertimeBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Overtime = new();
            overtimeDialog!.CloseDialog();
        }
    }

    //Add Sanction clicked
    SanctionDialog? sanctionDialog;
    Sanction Sanction = new();
    List<SanctionType> SanctionTypes = [];
    private void AddSanctionClicked()
    {
        Sanction.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        sanctionDialog!.OpenDialog();
    }

    //Save Sanction Handler
    async Task SaveSanctionEvent(Sanction item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await sanctionService.Insert(item, Constants.SanctionBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Sanction = new();
            sanctionDialog!.CloseDialog();
        }
    }

    // Add Vacation clicked
    VacationDialog? vacationDialog;
    Vacation Vacation = new();
    List<VacationType> VacationTypes = [];
    private void AddVacationClicked()
    {
        Vacation.EmployeeId = SelectedEmployee.Id;
        contextMenu!.CloseContextMenu();
        vacationDialog!.OpenDialog();
    }

    //Save Vacation Handler
    async Task SaveVacationEvent(Vacation item)
    {
        item.EmployeeId = SelectedEmployee.Id;
        var (flag, message) = await vacationService.Insert(item, Constants.VacationBaseUrl);
        var response = await DisplayMessage(flag, message);
        if (response)
        {
            SelectedEmployee = new();
            Vacation = new();
            vacationDialog!.CloseDialog();
        }
    }

    //Details employee close btn clicked
    void HandleDetailsPageCloseBtnClicked()
    {
        ShowDetailsPage = false;
        ShowMainPage = true;
    }


    //Display message using dialog service
    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            Snackbar.Add(message, Severity.Success);
            return true;
        }
        else
        {
            Snackbar.Add(message, Severity.Error);
            return false;
        }
    }
    public void Dispose() => allState.Action -= StateHasChanged;

    string _searchString = null;

    private Func<Employee, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.JobName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Branch.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Town.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{x.CivilId} {x.FileNumber} {x.TelephoneNumber}".Contains(_searchString))
            return true;
        return false;
    };
    //Excel export / PDF Export
    private async Task ExportToPdf()
    {
        var json = JsonSerializer.Serialize(Employees, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        await JS.InvokeVoidAsync("pdfUtils.generateEmployeePdf", json);
    }

    private async Task ExportToExcel()
    {
        var json = JsonSerializer.Serialize(Employees);
        await JS.InvokeVoidAsync("excelUtils.exportToExcel", json);
    }

    private async Task PrintGrid()
    {
        await JS.InvokeVoidAsync("printGrid");
    }
}
