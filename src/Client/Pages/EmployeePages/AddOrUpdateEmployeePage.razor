    @implements IDisposable

<MudPaper Class="mt-12 mx-auto" Style="width:1200px;">
    @if (allState.ShowEmployee && ShowAddOrUpdateEmployee)
    {
        <MudGrid>
            <MudItem xs="1">
                <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" OnClick="Closeform" />
            </MudItem>
            @{                                  
                Title = Employee.Id > 0 ? "Update" : "Add";                           
            }
            <MudItem xs="10" Class="text-center">
                <MudText Typo="Typo.h5">@Title Employee</MudText>
            </MudItem>
        </MudGrid>

        <!-- Progresso visual -->
        <MudProgressLinear Value="@((_activeStep) * 50)" Color="Color.Primary" Class="my-4" />
        <MudText Typo="Typo.subtitle2" Align="Align.Center">Etapa @_activeStep de 2</MudText>

        @if (_activeStep == 1)
        {
            <MudPaper Class="pa-6 my-6">
                <EditForm Model="EmployeeGroup1" OnValidSubmit="Form1">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField Label="Fullname" @bind-Value="EmployeeGroup1.Name" For="@(() => EmployeeGroup1.Name)" Class="mb-6" />

                            <MudTextField Label="Telephone" @bind-Value="EmployeeGroup1.TelephoneNumber" For="@(() => EmployeeGroup1.TelephoneNumber)" Class="mb-6" />

                            <MudTextField Label="Address" @bind-Value="EmployeeGroup1.Address" For="@(() => EmployeeGroup1.Address)" Class="mb-6" />

                            <MudImage Src="@EmployeeGroup1.Photo" Width="100" Height="100" Elevation="25" Class="rounded-lg ma-4" FallbackSrc="../images/profile/user.png" />
                        </MudItem>

                        <MudItem xs="6">
                            <MudTextField Label="Civil ID" @bind-Value="EmployeeGroup1.CivilId" For="@(() => EmployeeGroup1.CivilId)" Class="mb-6" />

                            <MudTextField Label="File Number" @bind-Value="EmployeeGroup1.FileNumber" For="@(() => EmployeeGroup1.FileNumber)" Class="mb-6" />

                            <MudText Class="@(!string.IsNullOrEmpty(ImageUploadMessage) ? "mud-error-text" : null)">
                                @(!string.IsNullOrEmpty(ImageUploadMessage) ? ImageUploadMessage : "Upload Image")
                            </MudText>                          
                            <InputFile OnChange="UploadImage" />
                            <MudGrid Justify="Justify.FlexEnd" Class="mt-6">
                                <MudItem>
                                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="MudBlazor.ButtonType.Submit" EndIcon="@Icons.Material.Filled.ArrowForward">
                                        Next
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        }

        @if (_activeStep == 2)
        {
            <MudPaper Class="pa-6 my-6">
                <EditForm Model="EmployeeGroup2" OnValidSubmit="Form2">
                    <DataAnnotationsValidator />
                    <MudGrid>
                        <MudItem xs="6">                          
                            <MudTextField Label="Job Name" @bind-Value="EmployeeGroup2.JobName" For="@(() => EmployeeGroup2.JobName)" Class="mb-6" />

                            @if (EmployeeGroup2.GeneralDepartmentId == 0)        
                            {                                  
                                EmployeeGroup2.GeneralDepartmentId = GeneralDepartment;                                    
                            }
                            <MudSelect T="int" Label="General Department" @bind-Value="EmployeeGroup2.GeneralDepartmentId" Class="mb-6">
                                @foreach (var item in GeneralDepartments)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                            @if (EmployeeGroup2.DepartmentId == 0)        
                            {                                  
                                EmployeeGroup2.DepartmentId = Department;                                    
                            }
                            <MudSelect T="int" Label="Department" @bind-Value="EmployeeGroup2.DepartmentId" Class="mb-6">
                                @foreach (var item in Departments)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                            @if (EmployeeGroup2.BranchId == 0)        
                            {                                  
                                EmployeeGroup2.BranchId = Branch;                                    
                            }
                            <MudSelect T="int" Label="Branch" @bind-Value="EmployeeGroup2.BranchId" For="@(() => EmployeeGroup2.BranchId)" Class="mb-6">
                                @foreach (var item in Branches)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="6">
                            @if (EmployeeGroup2.CountryId == 0)        
                            {                                  
                                EmployeeGroup2.CountryId = Country;                                    
                            }
                            <MudSelect T="int" Label="Country" @bind-Value="EmployeeGroup2.CountryId" Class="mb-6">
                                @foreach (var item in Countries)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                            @if (EmployeeGroup2.CityId == 0)        
                            {                                  
                                EmployeeGroup2.CityId = City;                                    
                            }
                            <MudSelect T="int" Label="City" @bind-Value="EmployeeGroup2.CityId" Class="mb-6">
                                @foreach (var item in Cities)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>
                            @if (EmployeeGroup2.TownId == 0)        
                            {                                  
                                EmployeeGroup2.TownId = Town;                                    
                            }
                            <MudSelect T="int" Label="Town" @bind-Value="EmployeeGroup2.TownId" For="@(() => EmployeeGroup2.TownId)" Class="mb-6">
                                @foreach (var item in Towns)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            </MudSelect>

                            <MudTextField Label="Other" @bind-Value="EmployeeGroup2.Other" Lines="5" Variant="Variant.Text" />

                        </MudItem>
                    </MudGrid>
                    <MudGrid Justify="Justify.SpaceBetween" Class="mt-6">
                        <MudItem>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="PrevClicked" StartIcon="@Icons.Material.Filled.ArrowBack">
                                Prev
                            </MudButton>
                        </MudItem>

                        <MudItem>
                            <MudButton Color="Color.Success" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" ButtonType="MudBlazor.ButtonType.Submit">
                                Save
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </EditForm>
            </MudPaper>
        }
    }
</MudPaper>


@code {
    [Parameter] public Employee Employee { get; set; } = new();

    [Parameter] public bool ShowAddOrUpdateEmployee { get; set; }
    [Parameter] public EmployeeGrouping1 EmployeeGroup1 { get; set; } = new();
    [Parameter] public EmployeeGrouping2 EmployeeGroup2 { get; set; } = new();

    [Parameter] public List<Country> Countries { get; set; } = new();
    [Parameter] public List<City> Cities { get; set; } = new();
    [Parameter] public List<Town> Towns { get; set; } = new();

    [Parameter] public List<GeneralDepartment> GeneralDepartments { get; set; }
    [Parameter] public List<Department> Departments { get; set; } = new();
    [Parameter] public List<Branch> Branches { get; set; } = new();

    public string Title { get; set; } = "";

    public int GeneralDepartment { get; set; } 
    public int Department { get; set; }
    public int Branch { get; set; }
    public int Country { get; set; }
    public int City { get; set; }
    public int Town { get; set; }


    //Form closed
    [Parameter] public EventCallback NotifyParentFormCloseClicked { get; set; }
    public async Task Closeform()
    {
        ShowAddOrUpdateEmployee = false;
        _activeStep = 1;        
        ClearContent();
        await NotifyParentFormCloseClicked.InvokeAsync();
    }

    //File Upload
    string ImageUploadMessage = "";
    private async Task UploadImage(InputFileChangeEventArgs e)
    {
        if (e.File.Name.ToLower().Contains(".png"))
        {
            var format = "image/png";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            ImageUploadMessage = "";
            EmployeeGroup1.Photo = imageData;
            imageData = "";
            return;

        }
        ImageUploadMessage = "PNG file needed.";
        return;
    }
    //Form Validations
    //Form 1
    private bool ValidateEmployeeGroup1()
    {
        if (string.IsNullOrEmpty(EmployeeGroup1.Name)
        || string.IsNullOrEmpty(EmployeeGroup1.TelephoneNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.FileNumber)
        || string.IsNullOrEmpty(EmployeeGroup1.Address)
        || string.IsNullOrEmpty(EmployeeGroup1.Photo)
        || string.IsNullOrEmpty(EmployeeGroup1.CivilId))
            return false;
        else
            return true;
    }

    //Form 2
    private bool ValidateEmployeeGroup2()
    {
        if (string.IsNullOrEmpty(EmployeeGroup2.JobName)
        || EmployeeGroup2.TownId == 0
        || EmployeeGroup2.BranchId == 0)
            return false;
        else
            return true;
    }
    private int _activeStep = 1;
    //Save forms
    [Parameter] public EventCallback<Employee> HandleSaveEmployeeCLickedEvent { get; set; }
    private async Task Form1()
    {
        var isValid = ValidateEmployeeGroup1();
        if (isValid)
        {
            Employee.Name = EmployeeGroup1.Name;
            Employee.TelephoneNumber = EmployeeGroup1.TelephoneNumber;
            Employee.Address = EmployeeGroup1.Address;
            Employee.CivilId = EmployeeGroup1.CivilId;
            Employee.FileNumber = EmployeeGroup1.FileNumber;
            Employee.Photo = EmployeeGroup1.Photo;
            _activeStep = 2;
        }
    }

    private async Task Form2()
    {
        var isValid = ValidateEmployeeGroup2();
        if (isValid)
        {
            Employee.JobName = EmployeeGroup2.JobName;
            Employee.Other = EmployeeGroup2.Other;
            Employee.BranchId = EmployeeGroup2.BranchId;
            Employee.TownId = EmployeeGroup2.TownId;

            await HandleSaveEmployeeCLickedEvent.InvokeAsync(Employee);
            _activeStep = 1;
        }
    }

    private void PrevClicked() => _activeStep = 1;

    public void ClearContent()
    {
        EmployeeGroup1 = new();
        EmployeeGroup2 = new();
        Employee.Id = 0;
        GeneralDepartment = 0; 
        Department = 0;
        Branch = 0;
        Country = 0;
        City = 0;
        Town = 0;
        Employee = new();
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        allState.Action += StateHasChanged;
    }
    
    public void Dispose() => allState.Action -= StateHasChanged;
}