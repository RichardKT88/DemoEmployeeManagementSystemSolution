@implements IDisposable
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Text.Json
@if (allState.ShowSanction)
{
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-12">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="4" Class="p-4">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                        <MudStack Row Spacing="2">
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToExcel">
                                Export Excel
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="ExportToPdf">
                                Export PDF
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Tertiary" StartIcon="@Icons.Material.Filled.Print" OnClick="PrintGrid">
                                Print
                            </MudButton>
                        </MudStack>
                    </MudStack>
                    <MudDataGrid Items="@Sanctions"
                                 T="Sanction"
                                 MultiSelection="true"
                                 Bordered="true"
                                 Striped="true"
                                 Hover="true"
                                 Dense="true"
                                 SortMode="SortMode.Multiple"
                                 Filterable="true"
                                 QuickFilter="@_quickFilter">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Overtime Information</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="e => e.EmployeeId" Title="Employee ID" />
                            <TemplateColumn T="Sanction" Title="Type">
                                <CellTemplate>
                                    @context.Item?.SanctionType?.Name
                                </CellTemplate>
                            </TemplateColumn>
                            <PropertyColumn Property="x => x.Date" Title="Occuring Date" Format="dd/MM/yyyy" />
                            <PropertyColumn Property="x => x.Punishment" Title="Punishment" />
                            <PropertyColumn Property="x => x.PunishmentDate" Title="Punishment Date" Format="dd/MM/yyyy" />
                            <TemplateColumn T="Sanction" Title="Action">
                                <CellTemplate>
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="@(() => EditSanction(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteSanction(context.Item))" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    Sanction Sanction = new();
    public List<Sanction> Sanctions { get; set; } = new();
    public List<SanctionType> SanctionTypes { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        await GetSanction();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => SanctionTypes = await sanctionTypeService.GetAll(Constants.SanctionTypeBaseUrl);

    private async Task GetSanction() => Sanctions = await sanctionService.GetAll(Constants.SanctionBaseUrl);

    string _searchString = null;

    private Func<Sanction, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if ($"{x.EmployeeId}".Contains(_searchString))
            return true;
        if (x.SanctionType.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Punishment.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    //Excel export / PDF Export
    private async Task ExportToPdf()
    {
        var json = JsonSerializer.Serialize(Sanctions, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        await JS.InvokeVoidAsync("pdfUtils.generateDoctorPdf", json);
    }

    private async Task ExportToExcel()
    {
        var json = JsonSerializer.Serialize(Sanctions);
        await JS.InvokeVoidAsync("excelUtils.exportDoctorToExcel", json);
    }

    private async Task PrintGrid()
    {
        await JS.InvokeVoidAsync("printGrid");
    }

    private async Task EditSanction(Sanction sanction)
    {
        var parameters = new DialogParameters
        {
            { "Sanction", sanction },
            { "SanctionTypes", SanctionTypes },
        };

        var dialog = await DialogService.ShowAsync<SanctionDialog>("Update Employe's Sanction", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetSanction();
    }

    private async Task DeleteSanction(Sanction sanction)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete this?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await sanctionService.DeleteById(sanction.EmployeeId, Constants.SanctionBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await GetSanction();
        }
    }

    public void Dispose() => allState.Action -= StateHasChanged;
}

