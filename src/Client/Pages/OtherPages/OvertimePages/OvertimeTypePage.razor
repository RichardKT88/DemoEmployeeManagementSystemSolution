@implements IDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@if (allState.ShowOvertimeType)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-8">
        <MudPaper Class="p-4 mt-5 mx-auto" Style="width:1200px;" Elevation="6">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">Overtime Types</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Success" StartIcon="@Icons.Material.Filled.AddCircleOutline" OnClick="AddOverTimeType">
                    Add Type
                </MudButton>
            </MudStack>
                <MudTable Items="Types" Hover="true" Bordered="true" Striped="true">
                    <HeaderContent>
                        <MudTh>Id</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Id</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="() => EditOverTimeType(context)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => DeleteOverTimeType(context)" />
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Class="text-center my-4" Color="Color.Info">No Type added yet!</MudText>
                    </NoRecordsContent>
                </MudTable>
        </MudPaper>
    </MudContainer>
}

@code {
    OvertimeType OvertimeType = new();
    public List<OvertimeType> Types { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetTypes();
        allState.Action += StateHasChanged;
    }

    private async Task GetTypes() => Types = await overtimeTypeService.GetAll(Constants.OvertimeTypeBaseUrl);

    private async Task AddOverTimeType()
    {
        var parameters = new DialogParameters
        {
            { "OvertimeType", new OvertimeType() },
        };

        var dialog = await DialogService.ShowAsync<OvertimeTypeDialog>("Add Overtime Type", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetTypes();
    }
    private async Task EditOverTimeType(OvertimeType overTimeType)
    {
        var parameters = new DialogParameters
        {
            { "OvertimeType", overTimeType },
        };

        var dialog = await DialogService.ShowAsync<OvertimeTypeDialog>("Update Overtime Type", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetTypes();
    }

    private async Task DeleteOverTimeType(OvertimeType overTimeType)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {overTimeType.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await overtimeTypeService.DeleteById(overTimeType.Id, Constants.OvertimeTypeBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await GetTypes();
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
