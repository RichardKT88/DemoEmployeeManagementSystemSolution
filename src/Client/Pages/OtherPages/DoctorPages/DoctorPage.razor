@implements IDisposable
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Text.Json
@if (allState.ShowHealth)
{   
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-12">
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Elevation="4" Class="p-4">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">                     
                        <MudStack Row Spacing="2">
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Primary" StartIcon="@Icons.Material.Filled.Download" OnClick="ExportToExcel">
                                Export Excel
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Secondary" StartIcon="@Icons.Material.Filled.PictureAsPdf" OnClick="ExportToPdf">
                                Export PDF
                            </MudButton>
                            <MudButton Variant="Variant.Filled" Color="MudBlazor.Color.Tertiary" StartIcon="@Icons.Material.Filled.Print" OnClick="PrintGrid">
                                Print
                            </MudButton>
                        </MudStack>
                    </MudStack>
                    <MudDataGrid Items="@Doctors"
                                 T="Doctor"
                                 MultiSelection="true"
                                 Bordered="true"
                                 Striped="true"
                                 Hover="true"
                                 Dense="true"
                                 SortMode="SortMode.Multiple"
                                 Filterable="true"
                                 QuickFilter="@_quickFilter">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Health Information</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="MudBlazor.Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <Columns>
                            <PropertyColumn Property="e => e.EmployeeId" Title="Employee ID" />
                            <PropertyColumn Property="e => e.MedicalDiagnose" Title="Medical Diagnose" />
                            <PropertyColumn Property="e => e.MedicalRecommendation" Title="Recommendation" />
                            <PropertyColumn Property="@((e) => e.Date.ToString("MM/dd/yyyy"))" Title="Date" />
                            <TemplateColumn T="Doctor" Title="Action">
                                <CellTemplate>                                   
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="@(() => EditDoctor(context.Item))" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteDoctor(context.Item))" />
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
}

@code {
    Doctor Doctor = new();
    public List<Doctor> Doctors { get; set; } = new();
    protected async override Task OnInitializedAsync()
    {
        await GetHealth();
        allState.Action += StateHasChanged;
    }

    private async Task GetHealth() => Doctors = await doctorService.GetAll(Constants.DoctorBaseUrl);

    string _searchString = null;

    private Func<Doctor, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if ($"{x.EmployeeId}".Contains(_searchString))
            return true;       
        if (x.MedicalDiagnose.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.MedicalRecommendation.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;      
        return false;
    };

    //Excel export / PDF Export
    private async Task ExportToPdf()
    {
        var json = JsonSerializer.Serialize(Doctors, new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });
        await JS.InvokeVoidAsync("pdfUtils.generateDoctorPdf", json);
    }

    private async Task ExportToExcel()
    {
        var json = JsonSerializer.Serialize(Doctors);
        await JS.InvokeVoidAsync("excelUtils.exportDoctorToExcel", json);
    }

    private async Task PrintGrid()
    {
        await JS.InvokeVoidAsync("printGrid");
    }

    private async Task EditDoctor(Doctor doctor)
    {
        var parameters = new DialogParameters
        {
            { "Doctor", doctor },
        };

        var dialog = await DialogService.ShowAsync<DoctorDialog>("Update Doctor", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetHealth();
    }

    private async Task DeleteDoctor(Doctor doctor)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete this?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await doctorService.DeleteById(doctor.EmployeeId, Constants.DoctorBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await GetHealth();
        }
    }   

    public void Dispose() => allState.Action -= StateHasChanged;   
}
