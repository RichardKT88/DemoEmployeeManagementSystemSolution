<MudDialog>
    <DialogContent>
        <MudForm @ref="_form" Model="VacationType">
            <MudPaper Class="p-4">
                <MudTextField Label="Name" @bind-Value="VacationType.Name" Required="true" For="@(() => VacationType.Name)" />
                <MudStack Row Justify="Justify.FlexEnd" Class="mt-6">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Save">Save</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" OnClick="Cancel">Cancel</MudButton>
                </MudStack>
            </MudPaper>
        </MudForm>
    </DialogContent>
</MudDialog>
@code {
    [Parameter] public VacationType VacationType { get; set; } = new();
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    private MudForm _form = default!;

    private async void Save()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            if (VacationType.Id > 0)
            {
                var result = await vacationTypeService.Update(VacationType, Constants.VacationTypeBaseUrl);
                Snackbar.Add(result.Message, result.Flag ? Severity.Success : Severity.Error);
            }
            else
            {
                var result = await vacationTypeService.Insert(VacationType, Constants.VacationTypeBaseUrl);
                Snackbar.Add(result.Message, result.Flag ? Severity.Success : Severity.Error);
            }

            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            Snackbar.Add("Please fill all required fields.", Severity.Warning);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
