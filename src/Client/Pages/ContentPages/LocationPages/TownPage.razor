@implements IDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (allState.ShowTown)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-8">
        <MudPaper Class="p-4 mt-5 mx-auto" Style="width:1200px;" Elevation="6">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">Towns</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="AddTown">
                    <MudIcon Icon="@Icons.Material.Filled.AddCircleOutline" Class="me-1" /> Add Town
                </MudButton>
            </MudStack>
            <MudTable Items="Towns" Dense="true" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>City</MudTh>
                    <MudTh>Town</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="City">@context.City?.Name</MudTd>
                    <MudTd DataLabel="Town">@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="@(() => EditTown(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteTown(context))" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No Towns added yet!</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudContainer>
}

@code {
    Town Town = new();
    public List<Town> Towns { get; set; } = new();
    public List<City> Cities { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        allState.Action += StateHasChanged;
    }
    private async Task LoadData()
    {
        Cities = await cityService.GetAll(Constants.CityBaseUrl);
        Towns = await townService.GetAll(Constants.TownBaseUrl);
    }

    private async Task AddTown()
    {
        var parameters = new DialogParameters
        {
            { "Town", new Town() },
            { "Cities", Cities },
        };

        var dialog = await DialogService.ShowAsync<TownDialog>("Add Town", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
    }

    private async Task EditTown(Town town)
    {
        var parameters = new DialogParameters
        {
            { "Town", town },
            { "Cities", Cities },
        };

        var dialog = await DialogService.ShowAsync<BranchDialog>("Update Town", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
    }

    private async Task DeleteTown(Town town)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {town.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await branchService.DeleteById(town.Id, Constants.TownBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await LoadData();
        }
    }


    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
