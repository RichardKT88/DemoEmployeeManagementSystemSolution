@implements IDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (allState.ShowCountry)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-8">
        <MudPaper Class="p-4 mt-5 mx-auto" Style="width:1200px;" Elevation="6">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">Countries</MudText>
                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="AddCountry">
                    <MudIcon Icon="@Icons.Material.Filled.AddCircleOutline" Class="me-1" /> Add Country
                </MudButton>
            </MudStack>

            <MudTable Items="Countries" Dense="true" Hover="true" Bordered="true" Striped="true">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Country</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="Country">@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="@(() => EditCountry(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteCountry(context))" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class="m-2">No Country added yet!</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudContainer>
}

@code {

    Country Country = new();
    public List<Country> Countries { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCountries();
        allState.Action += StateHasChanged;
    }

    private async Task GetCountries()
    {
        Countries = await countryService.GetAll(Constants.CountryBaseUrl);
    }

    private async Task AddCountry()
    {
        var parameters = new DialogParameters
        {
            { "Country", new Country() }
        };

        var dialog = await DialogService.ShowAsync<CountryDialog>("Add Country", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetCountries();

    }

    private async Task EditCountry(Country country)
    {
        var parameters = new DialogParameters
        {
            { "Country", country },
        };

        var dialog = await DialogService.ShowAsync<CountryDialog>("Update Country", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await GetCountries();
    }
    private async Task DeleteCountry(Country country)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {country.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await countryService.DeleteById(country.Id, Constants.GeneralDepartmentBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await GetCountries();
        }
    }
  

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
