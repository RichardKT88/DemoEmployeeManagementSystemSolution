@inject IDialogService DialogService
@inject ISnackbar Snackbar
@implements IDisposable

@if (allState.ShowBranch)
{
    <MudContainer Class="mt-5">
        <MudPaper Elevation="4" Class="p-4">
            <MudStack Direction="Row" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                <MudText Typo="Typo.h5">Branches</MudText>
                <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="AddButtonClicked">
                    Add Branch
                </MudButton>
            </MudStack>

            <MudPaper Class="mt-4" Style="max-height:580px; overflow-y:auto;">
                <MudTable Items="Branches" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>#</MudTh>
                        <MudTh>Id</MudTh>
                        <MudTh>Department</MudTh>
                        <MudTh>Branch</MudTh>
                        <MudTh>Action</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.Id</MudTd>
                        <MudTd>@context.Id</MudTd>
                        <MudTd>@context.Department?.Name</MudTd>
                        <MudTd>@context.Name</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" OnClick="()=>EditClicked(context)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="()=>DeleteClicked(context)" />

                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Class="text-center">No Branch added yet!</MudText>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudPaper>
    </MudContainer>
}

<BranchDialog HandleSaveOperationEvent="HandleSaveOperationEvent"
              Branch="Branch"
              Departments="Departments" />

@code {
    public string Title { get; set; } = "Add";
    Branch Branch = new();
    public List<Department> Departments { get; set; } = new();
    public List<Branch> Branches { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await GetBranches();
        await GetDepartments();
        allState.Action += StateHasChanged;
    }

    private async Task GetBranches()
    {
        Branches = await branchService.GetAll(Constants.BranchBaseUrl);
    }

    private async Task GetDepartments()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
    }

    private async void AddButtonClicked()
    {
        var parameters = new DialogParameters
    {
        { "Branch", new Branch() },
        { "Departments", Departments }
    };

        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.ShowAsync<BranchDialog>("Add Branch", parameters, options);
        var result = dialog.Result;

        if (!result.Result.IsCanceled)
        {
            await GetBranches();
        }
    }

    private async void EditClicked(Branch branch)
    {
        var parameters = new DialogParameters
    {
        { "Branch", new Branch
            {
                Id = branch.Id,
                Name = branch.Name,
                DepartmentId = branch.DepartmentId,
                Department = branch.Department
            }
        },
        { "Departments", Departments }
    };

        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.ShowAsync<BranchDialog>("Edit Branch", parameters, options);
        var result = dialog.Result.Result;

        if (!result.IsCanceled)
        {
            await GetBranches();
        }
    }
    
    private async Task HandleSaveOperationEvent(Branch branch)
    {
        bool successCheck = false;
        if (branch.Id > 0)
        {
            var result = await branchService.Update(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(result.Flag, result.Message);
        }
        else
        {
            var response = await branchService.Insert(branch, Constants.BranchBaseUrl);
            successCheck = await DisplayMessage(response.Flag, response.Message);
        }
        if (successCheck)
        {
            Branch = new();
            await GetBranches();
        }
    }

    

    private async Task DeleteClicked(Branch branch)
    {

        var confirm = await DialogService.ShowMessageBox("Confirm Delete",$"Are you sure want to delete the {branch.Name}?","Remove","Cancel");

        if (!(bool)confirm) return;

        var response = await branchService.DeleteById(branch.Id, Constants.BranchBaseUrl);
        
        var result = await DisplayMessage(response.Flag, response.Message);
        
        if (result)
            await GetBranches();
       
    }

    private async Task<bool> DisplayMessage(bool flag, string message)
    {
        if (flag)
        {
            Snackbar.Add(message, Severity.Success);
            return await Task.FromResult(true);
        }
        else
        {
            Snackbar.Add(message, Severity.Warning);
            return await Task.FromResult(false);
        }
    } 

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
