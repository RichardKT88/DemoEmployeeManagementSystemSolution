@implements IDisposable
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (allState.ShowDepartment)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-8">
        <MudPaper Class="p-4 mt-5 mx-auto" Style="width:1200px;" Elevation="6">
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                <MudText Typo="Typo.h5">Departments</MudText>
                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="AddDepartment">
                    <MudIcon Icon="@Icons.Material.Filled.AddCircleOutline" Class="me-1" /> Add Department
                </MudButton>
            </MudStack>

            <MudTable Items="Departments" Hover="true" Bordered="true" Striped="true" Elevation="0" Dense="true">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>General Department</MudTh>
                    <MudTh>Department</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.Id</MudTd>
                    <MudTd DataLabel="General Department">@context.GeneralDepartment?.Name</MudTd>
                    <MudTd DataLabel="Department">@context.Name</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small" OnClick="@(() => EditDepartment(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteDepartment(context))" />
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText Class="text-center mt-4" Color="Color.Info">No Departments added yet!</MudText>
                </NoRecordsContent>
            </MudTable>
        </MudPaper>
    </MudContainer>
}

@code {
    Department Department = new();
    public List<GeneralDepartment> GeneralDepartments { get; set; } = new();
    public List<Department> Departments { get; set; } = new();


    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        allState.Action += StateHasChanged;
    }

    private async Task LoadData()
    {
        Departments = await departmentService.GetAll(Constants.DepartmentBaseUrl);
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);       
    }   

    private async Task AddDepartment()
    {
        var parameters = new DialogParameters
        {
            { "Department", new Department() },
            { "GeneralDepartments", GeneralDepartments },
            { "Title", "Add Department" }
        };

        var dialog = await DialogService.ShowAsync<DepartmentDialog>("Add Department", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
      
    }

    private async Task EditDepartment(Department department)
    {
        var parameters = new DialogParameters
        {
            { "Department", department },
            { "GeneralDepartments", GeneralDepartments },
            { "Title", "Update Branch" }
        };

        var dialog = await DialogService.ShowAsync<DepartmentDialog>("Update Branch", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
    }

    private async Task DeleteDepartment(Department department)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {department.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await departmentService.DeleteById(department.Id, Constants.DepartmentBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await LoadData();
        }
    }

    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
