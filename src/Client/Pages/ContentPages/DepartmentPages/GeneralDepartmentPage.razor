@inject IDialogService DialogService
@implements IDisposable
@inject ISnackbar Snackbar

@if (allState.ShowGeneralDepartment)
{
    <MudContainer MaxWidth="MaxWidth.False" Class="mt-8">
        <MudPaper Class="p-4 mt-5 mx-auto" Style="width:1200px;" Elevation="6">
            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudText Typo="Typo.h5">General Departments</MudText>
                <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="AddGeneralDepartment">
                    <MudIcon Icon="@Icons.Material.Filled.AddCircleOutline" Class="me-1" /> Add General Department
                </MudButton>
            </MudStack>

            <MudTable Items="GeneralDepartments" Hover="true" Bordered="true" Striped="true" Elevation="0" Dense="true">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>General Department</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Id</MudTd>
                    <MudTd>@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Info" Size="Size.Small" OnClick="@(() => EditGeneralDepartment(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteGeneralDepartment(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudContainer>
}

@code {
    GeneralDepartment generalDepartment = new();
    public List<GeneralDepartment> GeneralDepartments = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        allState.Action += StateHasChanged;
    }

    private async Task LoadData()
    {
        GeneralDepartments = await generalDepartmentService.GetAll(Constants.GeneralDepartmentBaseUrl);
    }

    private async Task AddGeneralDepartment()
    {
        var parameters = new DialogParameters
        {
            { "GeneralDepartment", new GeneralDepartment() },
            { "Title", "Add General Department" }
        };

        var dialog = await DialogService.ShowAsync<GeneralDepartmentDialog>("Add General Department", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();

    }

    private async Task EditGeneralDepartment(GeneralDepartment generalDepartment)
    {
        var parameters = new DialogParameters
        {
            { "GeneralDepartment", generalDepartment },
            { "Title", "Update General Department" }
        };

        var dialog = await DialogService.ShowAsync<GeneralDepartmentDialog>("Update General Department", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
            await LoadData();
    }
    private async Task DeleteGeneralDepartment(GeneralDepartment generalDepartment)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Are you sure you want to delete {generalDepartment.Name}?" },
            { "ConfirmButtonText", "Delete" },
            { "CancelButtonText", "Cancel" },
            { "Color", Color.Error }
        };

        var options = new MudBlazor.DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true
            };

        var dialog = await DialogService.ShowAsync<ConfirmDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await generalDepartmentService.DeleteById(generalDepartment.Id, Constants.GeneralDepartmentBaseUrl);
            Snackbar.Add(response.Message, response.Flag ? Severity.Success : Severity.Error);

            if (response.Flag)
                await LoadData();
        }
    }
    public void Dispose()
    {
        allState.Action -= StateHasChanged;
    }
}
