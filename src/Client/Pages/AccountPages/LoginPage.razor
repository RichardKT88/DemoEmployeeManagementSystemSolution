@page "/identity/account/login"
@layout AuthenticationLayout

<div class="d-flex justify-center align-center" style="min-height: 100vh;">
    <MudPaper Elevation="6" Class="pa-6 rounded-lg" Style="width: 380px; background-color: #f5f5f5; color: black">
        <MudForm @ref="form">
            <MudStack Spacing="3">

                <MudStack AlignItems="AlignItems.Center">
                    <MudText Typo="Typo.h4" GutterBottom="true">Login</MudText>
                    <MudAvatar Size="Size.Large" Class="mx-auto">
                        <MudImage Src="../images/companylogos/netcode.jpg"></MudImage>
                    </MudAvatar>
                </MudStack>

                <MudTextField @bind-Value="User.Email" Variant="Variant.Filled" Label="Email"
                              For="@(() => User.Email)" Required="true" FullWidth="true" />
                <MudTextField @bind-Value="User.Password" Variant="Variant.Filled" Label="Password"
                              For="@(() => User.Password)" InputType="InputType.Password" Required="true" FullWidth="true" />

                @if (ShowLoadingButton)
                {
                    <ButtonLoadingSpinner></ButtonLoadingSpinner>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" Style="background-color: #0d6efd; color: white;" FullWidth="true" OnClick="HandleLogin">
                        Login
                    </MudButton>
                }

                <MudText Class="mt-4" Color="Color.Error" Typo="Typo.caption" Align="Align.Center">
                    Don't have an account? <MudLink Underline="Underline.Always" Href="/identity/account/register">Sign Up</MudLink>
                </MudText>
            </MudStack>
        </MudForm>
    </MudPaper>
</div>

@code {
    private MudForm? form;
    Login User = new();
    public bool ShowLoadingButton { get; set; } = false;

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        await form!.Validate();

        if (!form.IsValid)
            return;

        ShowLoadingButton = true;
        var result = await accountService.SignInAsync(User);

        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success);
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession() { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Info);
        }

        ShowLoadingButton = false;
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");

    }
}
