@page "/identity/account/register"

<MudContainer MaxWidth="MaxWidth.Small" Class="mt-12">
    <MudPaper Elevation="6" Class="pa-6">
        <MudForm @ref="form">
            <MudStack Spacing="3">
                <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">
                    Register an Account
                </MudText>

                <MudStack AlignItems="AlignItems.Center">
                    <MudAvatar Size="Size.Large" Class="mb-2" >
                        <MudImage Src="../images/companylogos/netcode.jpg"></MudImage>
                    </MudAvatar>
                </MudStack>

                <MudTextField @bind-Value="User.Fullname" Label="Full Name" For="@(() => User.Fullname)" Required="true" />

                <MudTextField @bind-Value="User.Email" Label="Email" For="@(() => User.Email)" Required="true" />

                <MudTextField @bind-Value="User.Password" Label="Password" InputType="InputType.Password" For="@(() => User.Password)" Required="true" />

                <MudTextField @bind-Value="User.ConfirmPassword" Label="Confirm Password" InputType="InputType.Password" For="@(() => User.ConfirmPassword)" Required="true" />

                @if (ShowLoadingButton)
                {
                    <MudProgressCircular Color="Color.Primary" Size="Size.Small" Class="mx-auto" />
                }
                else
                {
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" OnClick="HandleRegistration">
                        Register
                    </MudButton>
                }

                <MudText Typo="Typo.caption" Align="Align.Center" Class="mt-4">
                    Already have an account? <MudLink Underline="Underline.Always" Href="/identity/account/login">Sign In</MudLink>
                </MudText>

            </MudStack>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private MudForm? form;
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();

    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; } = default!;

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleRegistration()
    {
        await form.Validate();

        if (!form.IsValid)
            return;

        ShowLoadingButton = true;

        var result = await accountService.CreateAsync(User);

        if (result.Flag)
        {
            Snackbar.Add(result.Message, Severity.Success);
            User = new();
        }
        else
        {
            Snackbar.Add(result.Message, Severity.Error);
        }

        ShowLoadingButton = false;
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        if (user.Identity!.IsAuthenticated)
        {
            NavManager.NavigateTo("/home/dashboard");
        }
    }

}
